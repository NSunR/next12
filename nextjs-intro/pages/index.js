//1.pages의 정체? 일단 봐
//2.자동적으로, pages안의 index 파일에 넣은 게 웹사이트에 보여.
//이게 framework(프레임워크)와 library의 핵심적인 차이.
//next.js같은 프레임워크에선 특정한 규칙을 따라서 특정한 걸 해야 해.
//그걸 따라야 모든 게 정상적으로 잘 동작해.
//react에는 있는 ReactDOM.render가 없어. 그저 pages에서 뭔가를 만드는 거야.(파일시스템라우팅)
//next.js는 그저 깊은 곳에서 ReactDOM.render같은 걸 하고 있는거야. 직접 접근하지 못할 뿐이지.
//추상화(Abstraction)을 시킨거야. 그게 바로 프레임워크인거야.
//3.프레임워크는 코드를 어떤 곳에 넣으면,프레임워크가 그 코드를 부르는 형태야.
//그 예시로 index.js파일을 만든거야.
//4.자동적으로 어떤 설정이나 router설치없이도 home에 가면 내용을 볼 수 있어.

export default function Home() {
  return "hi";
}

//2.라이브러리는 개발자로서 내가 사용하는 것. 즉, 내가 라이브러리불러와서
//라이브러리를 사용해서 무언가를 해.
//하지만 프레임워크는 내 코드를 불러와.
//여기 프레임워크에선 내가 코드를 적절한 위치에 잘 적으면
//프레임워크는 내 코드를 불러와서 모든 걸 동작하게 할거야.
//라이브러리를 사용할 때는, 내가 원하는 대로 코드를 작성할 수 있고,
//사용하고 싶을 떄 사용할 수 있어.
//예)리액트: 리액트를 쓸 때 언제 react를 부를지, 어떤 폴더 구조로 만들지 정할 수 있어.
//라우팅 설정도, component를 어디에 둘지도.
//라이브러리를 사용할 때는 내가 원할 때 언제든 어떤 방법으로든 부르면 돼.
